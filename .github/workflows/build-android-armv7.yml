name: build-android-armv7-minimal

on:
  workflow_dispatch:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Android NDK
      uses: nttld/setup-ndk@v1
      with:
        ndk-version: r25b
        
    - name: Create minimal Android-compatible version
      shell: bash
      run: |
        set -e
        
        echo "=== Creating minimal Android-compatible version ==="
        
        # Create a completely minimal version that removes Android dependencies
        cat > brcm_patchram_plus_minimal.c << 'EOF'
        /*
         * brcm_patchram_plus - Minimal Android version
         * Removed Android-specific dependencies
         */
        
        #include <stdio.h>
        #include <stdlib.h>
        #include <string.h>
        #include <unistd.h>
        #include <fcntl.h>
        #include <errno.h>
        #include <sys/ioctl.h>
        #include <sys/stat.h>
        #include <sys/types.h>
        #include <termios.h>
        #include <signal.h>
        #include <time.h>
        
        /* Android compatibility */
        #ifndef BOTHER
        #define BOTHER 0010000
        #endif
        
        #ifndef IBSHIFT
        #define IBSHIFT 16
        #endif
        
        /* Minimal Android property replacement */
        static int property_get(const char *key, char *value, const char *default_value) {
            /* Stub implementation for Android */
            if (strcmp(key, "ro.kernel.qemu") == 0) {
                strcpy(value, "0");
                return 0;
            }
            if (default_value) {
                strcpy(value, default_value);
                return 0;
            }
            return -1;
        }
        
        /* Copy the main functionality from original source */
        /* We'll extract the essential parts and remove Android dependencies */
        
        int main(int argc, char *argv[]) {
            printf("brcm_patchram_plus for Android - Minimal version\n");
            printf("This is a placeholder - need to extract full functionality\n");
            printf("Usage: %s --patchram <hcd_file> <serial_port>\n", argv[0]);
            return 0;
        }
        
        /* Need to extract and adapt the full functionality */
        EOF
        
        echo "=== Attempting to extract core functionality ==="
        
        # Try to extract just the core functionality without Android dependencies
        if [ -f brcm_patchram_plus.c ]; then
            # Extract function prototypes and main logic
            grep -E "^(int|void|static|char|\*)|main\(" brcm_patchram_plus.c | head -20
            
            # Create a working version by removing Android includes
            sed '/#include <cutils\/properties.h>/d' brcm_patchram_plus.c > brcm_patchram_plus_no_android.c
            sed -i 's/#include <sys\/termios.h>/#include <termios.h>/g' brcm_patchram_plus_no_android.c
            
            echo "=== Created version without Android dependencies ==="
            head -10 brcm_patchram_plus_no_android.c
        fi
        
    - name: Try compilation approaches
      shell: bash
      run: |
        set -e
        export NDK="$ANDROID_NDK_HOME"
        export TOOL="$NDK/toolchains/llvm/prebuilt/linux-x86_64/bin"
        mkdir -p build
        
        echo "=== Approach 1: Minimal version ==="
        "$TOOL/clang" --target=armv7a-linux-androideabi16 \
          --sysroot="$NDK/toolchains/llvm/prebuilt/linux-x86_64/sysroot" \
          -DANDROID -D__ANDROID__ \
          -O2 -Wl,--hash-style=both \
          -o build/brcm_patchram_plus_minimal \
          brcm_patchram_plus_minimal.c 2>&1 || echo "Minimal approach failed"
        
        if [ -f build/brcm_patchram_plus_minimal ]; then
          echo "=== Minimal version compiled successfully ==="
          file build/brcm_patchram_plus_minimal
        else
          echo "=== Trying no-Android version ==="
          if [ -f brcm_patchram_plus_no_android.c ]; then
            "$TOOL/clang" --target=armv7a-linux-androideabi16 \
              --sysroot="$NDK/toolchains/llvm/prebuilt/linux-x86_64/sysroot" \
              -DANDROID -D__ANDROID__ \
              -O2 -Wl,--hash-style=both \
              -Wno-implicit-function-declaration \
              -o build/brcm_patchram_plus \
              brcm_patchram_plus_no_android.c 2>&1 || echo "No-Android approach failed"
          fi
        fi
        
        echo "=== Trying alternative compilation flags ==="
        # Try with static linking and more permissive flags
        "$TOOL/clang" --target=armv7a-linux-androideabi16 \
          --sysroot="$NDK/toolchains/llvm/prebuilt/linux-x86_64/sysroot" \
          -DANDROID -D__ANDROID__ \
          -O2 -static \
          -Wno-everything \
          -Wl,--hash-style=both \
          -o build/brcm_patchram_plus_static \
          brcm_patchram_plus.c 2>&1 || echo "Static approach failed"
        
        # Check what we have
        echo "=== Build results ==="
        ls -la build/ 2>/dev/null || echo "No files built"
        
        # Test any built files
        for binary in build/brcm_patchram_plus*; do
          if [ -f "$binary" ]; then
            echo "=== Testing $binary ==="
            file "$binary"
            echo "=== Size: $(du -h "$binary" | cut -f1) ==="
          fi
        done
        
    - name: Upload any successful builds
      uses: actions/upload-artifact@v4
      with:
        name: brcm_patchram_plus-build-attempts
        path: |
          build/
          *.c
